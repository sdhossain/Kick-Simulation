import numpy as np
from scipy.optimize import curve_fit
from sklearn.linear_model import Ridge

def get_muscle_force_length_regression():
    """
    Returns regression function for force-length

    :return f: function that regresses value
    """
   
    data_x = np.array([37.415144, 38.511749, 39.373368, 39.451697, 40.391645, 40.469974, 40.626632, 41.409922, 41.488251, 41.488252, 41.488253, 41.879896, 42.036554, 42.584856, 42.819843, 42.898172, 42.898173, 43.211488, 43.289817, 43.524804, 43.603133, 43.603134, 43.759791, 43.759792, 44.308094, 44.464752, 45.169713, 45.483029, 45.561358, 45.639687, 45.639688, 45.718016, 45.874674, 46.344648, 46.344649, 46.501305, 46.657963, 46.736292, 47.049608, 47.362924, 47.441253, 47.597911, 47.597912, 47.67624, 48.224543, 48.929504, 49.007833, 49.007834, 49.007835, 49.477807, 49.712794, 49.712795, 49.791123, 50.182768, 50.652742, 50.652743, 50.652744, 50.73107, 50.887728, 50.966057, 51.122715, 51.436031, 51.749347, 52.610966, 53.394256, 53.472585, 53.550914, 53.629243, 53.629244, 53.707572, 53.86423, 53.86424, 54.255875, 54.334204, 54.725849, 55.822454, 56.214099, 56.449086, 56.840731, 57.075718, 57.075719, 57.310705, 57.545692, 57.780679, 57.859008, 58.407311, 58.563969, 58.955614, 59.347258, 59.425587, 59.660574, 59.817232, 60.052219, 60.522193, 60.600522, 61.227154, 61.305483, 61.383812, 61.383813, 61.383814, 61.462141, 62.167102, 62.32376, 62.637076, 63.10705, 63.342037, 63.420366, 63.420367, 63.498695, 63.655352, 63.733681, 63.81201, 63.890339, 63.890340, 64.438642, 64.438643, 64.751958, 64.830287, 65.065274, 65.37859, 65.613577, 65.691906, 65.770235, 65.770236, 66.083551, 66.396867, 66.94517, 67.023499, 67.180157, 67.415144, 67.571802, 67.806789, 68.355091, 68.511749, 69.451697, 70.313316, 70.313317, 70.469974, 71.409922, 72.428198, 72.976501, 73.368146, 73.368147, 73.368148, 73.446475, 74.386423, 75.169713, 75.4047, 76.344648 ])
    data_y = np.array([9.8, 14.6, 23.9, 3.5, 21.8, 17.6, 36.8, 26.6, 14.6, 15.8, 31.4, 2, 32, 42.5, 23.6, 46.4, 48.5, 50.3, 23.9, 54.2, 35, 44.9, 22.4, 57.2, 45.8, 60.5, 54.2, 46.1, 53.6, 46.4, 43.7, 67.7, 70.4, 62.9, 73.7, 71.6, 44.6, 75.5, 80.9, 62.9, 71.6, 81.5, 81.5, 66.8, 83.3, 82.1, 62.9, 81.2, 85.7, 76.1, 82.1, 86.9, 85.1, 87.8, 74.3, 84.8, 90.5, 87.2, 78.2, 80, 78.5, 89.9, 91.1, 89, 88.7, 78.5, 95, 96.8, 83.3, 92.3, 92.3, 96.8, 93.8, 94.7, 99.5, 96.2, 96.2, 100.1, 99.8, 99.2, 99.8, 98, 99.5, 99.2, 91.7, 90.8, 96.5, 99.2, 97.7, 91.4, 95.9, 96.8, 95.6, 99.8, 93.8, 84.5, 92, 95, 87.8, 77.3, 79.7, 89.6, 96.8, 80, 86.3, 59.9, 81.2, 79.7, 53, 85.7, 89.6, 86.9, 80.6, 76.1, 87.2, 81.8, 53.6, 52.4, 76.1, 64.1, 72.8, 68, 66.2, 47.6, 72.2, 76.1, 66.2, 42.8, 63.8, 35.6, 51.8, 62.9, 59.9, 27.2, 41.6, 29.6, 29.6, 48.8, 34.7, 24.5, 25.7, 34.7, 18.8, 17.6, 12.5, 12.5, 17.6, 12.5, 8.6])

    max_y = max(data_y)
    index = np.argmax(data_y)
    max_x = data_x[index]

    normx = data_x / max_x
    normy = data_y / max_y

    def gauss_function(x, a, x0, sigma):
      return a*np.exp(-(x-x0)**2/(2*sigma**2))

    popt, _ = curve_fit(gauss_function, normx, normy)

    def f(x):
      return gauss_function(x, popt[0], popt[1], popt[2])

    return f

def get_muscle_force_velocity_regression():
    """
    Returns regression function for force-velocity

    :return f: function that regresses value
    """

    data = np.array([
        [-1.0028395556708567, 0.0024834319945283845],
        [-0.8858611825192801, 0.03218792009622429],
        [-0.5176245843258415, 0.15771090304473967],
        [-0.5232565269687035, 0.16930496922242444],
        [-0.29749770052593094, 0.2899790099290114],
        [-0.2828848376217543, 0.3545364496120378],
        [-0.1801231103040022, 0.3892195938775034],
        [-0.08494610976156225, 0.5927831890757294],
        [-0.10185137142991896, 0.6259097662790973],
        [-0.0326643239546236, 0.7682365981934388],
        [-0.020787245583830716, 0.8526638522676352],
        [0.0028442725407418212, 0.9999952831301149],
        [0.014617579774061973, 1.0662107025777694],
        [0.04058866536166583, 1.124136223202283],
        [0.026390887007381902, 1.132426122025424],
        [0.021070257776939272, 1.1986556920827338],
        [0.05844673474682183, 1.2582274002971627],
        [0.09900238201929201, 1.3757434966156459],
        [0.1020023112662436, 1.4022310794556732],
        [0.10055894908138963, 1.1489210160137733],
        [0.1946227683309354, 1.1571212943090965],
        [0.3313459588217258, 1.152041225442796],
        [0.5510200231126625, 1.204839508502158]
    ])

    velocity = data[:, 0]
    force = data[:, 1]

    def fun(x, mu, sigma):
        return 1 / (1 + np.exp(-(x-mu) / sigma))

    X = np.zeros((len(velocity), 5))
    for i, j in enumerate(np.arange(-1, -0.01, 0.2)):
        X[:, i] = fun(velocity, j, 0.15)

    ridge_model = Ridge(alpha=1, fit_intercept=False).fit(X, force)
    coefs = ridge_model.coef_
    intercept = np.array([ridge_model.intercept_])
    
    return np.concatenate([intercept, coefs])